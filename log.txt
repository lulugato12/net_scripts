Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.594 MiB   37.594 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.594 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.594 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.535 MiB   12.941 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  119.855 MiB   69.320 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.113 MiB    0.258 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.113 MiB    0.000 MiB           1       file_genes.close()
    48  120.113 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.113 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.113 MiB  120.113 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.113 MiB    0.000 MiB           1       genes = list()
    57  120.113 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.328 MiB    0.203 MiB      126010       for gene in genes_data:
    60  140.328 MiB    7.820 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.328 MiB    9.391 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.328 MiB    0.000 MiB      126009           if prep[1] != "\n":
    63  140.328 MiB    2.801 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.328 MiB    0.000 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.582 MiB    0.254 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.582 MiB  140.582 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.582 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.582 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.582 MiB    0.000 MiB           1       count = 0
    78  140.582 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.594 MiB    0.000 MiB       60484       for case in cases_data:
    81  140.594 MiB    0.000 MiB       60483           print("gene " + str(count) + "...", end = " ")
    82  140.594 MiB    0.012 MiB       60483           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.594 MiB    0.000 MiB       60483           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.594 MiB    0.000 MiB       19579               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.594 MiB    0.000 MiB       19579               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.594 MiB    0.000 MiB       19579               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.594 MiB    0.000 MiB       19579               print("got one.", end = " ")
    89                                         
    90  140.594 MiB    0.000 MiB       19579               if protein != " ":
    91  140.594 MiB    0.000 MiB       17162                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.594 MiB    0.000 MiB       19579               if limit:
    94                                                         found += 1
    95                                                 else:
    96  140.594 MiB    0.000 MiB       40904               print("not found in genes.", end = " ")
    97                                         
    98  140.594 MiB    0.000 MiB       60483           count += 1
    99  140.594 MiB    0.000 MiB       60483           print("finished.")
   100                                         
   101  140.594 MiB    0.000 MiB       60483           if limit and found > max_found:
   102                                                     break
   103                                         
   104  140.594 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.594 MiB  140.594 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.594 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.594 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.594 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.594 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.594 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.594 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:2.8859919739166666min
Filter_motifs.
Filename: scripts/filter_motifs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    29   37.660 MiB   37.660 MiB           1   @profile(precision = 3, stream = log)
    30                                         def reading_data(motifs, updates):
    31   37.660 MiB    0.000 MiB           1       file_motif = open(motifs, "r")                                      # opens the file that contains the motif data
    32   37.660 MiB    0.000 MiB           1       file_names = open(updates, "r")                                     # opens the file that contians the name-id relation
    33                                         
    34   38.672 MiB    1.012 MiB           1       original = file_motif.readlines()                                   # reads all the data
    35   68.102 MiB   29.430 MiB           1       update = file_names.readlines()                                     # reads all the data
    36                                         
    37   68.102 MiB    0.000 MiB           1       file_names.close()
    38   68.102 MiB    0.000 MiB           1       file_motif.close()
    39                                         
    40   68.102 MiB    0.000 MiB           1       return original, update


Filename: scripts/filter_motifs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    43   68.102 MiB   68.102 MiB           1   @profile(precision = 3, stream = log)
    44                                         def prep_data(update):
    45                                             # storage
    46   68.102 MiB    0.000 MiB           1       tf_name = list()                                                    # list of motif names
    47   68.102 MiB    0.000 MiB           1       gene_name = list()                                                  # list of gene names
    48   68.102 MiB    0.000 MiB           1       tf_id = list()                                                      # list of motif ids
    49   68.102 MiB    0.000 MiB           1       gene_id = list()                                                    # list of gene ids
    50                                         
    51  137.559 MiB -681.086 MiB      251299       for l in update:
    52  137.559 MiB -665.781 MiB      251298           line = l.split("\t")                                            # splits the data line
    53  137.559 MiB -679.258 MiB      251298           gene_id.append(line[0])                                         # saves de gene id
    54  137.559 MiB -2389.875 MiB      251298           tf_id.append(line[1])                                           # saves the motif id
    55  137.559 MiB -3232.559 MiB      251298           gene_name.append(line[2])                                       # saves the gene name
    56  137.559 MiB -695.359 MiB      251298           tf_name.append(line[3].split("\n")[0])                          # saves the motif name
    57                                         
    58  137.559 MiB    0.000 MiB           1       return gene_id, tf_id, gene_name, tf_name


Filename: scripts/filter_motifs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    61  137.777 MiB  137.777 MiB           1   @profile(precision = 3, stream = log)
    62                                         def filter_exec(gene_id, tf_id, gene_name, tf_name):
    63                                             # variables
    64  137.777 MiB    0.000 MiB           1       output = list()                                                     # output data lines
    65  137.777 MiB    0.000 MiB           1       count = 0
    66                                         
    67  138.824 MiB    0.000 MiB       14598       for p in original:
    68  138.824 MiB    0.000 MiB       14597           print("line " + str(count) + "...", end = " ")
    69  138.824 MiB    0.000 MiB       14597           prep = p.split("\t")                                            # splits the data line to get the motif and the gene
    70  138.824 MiB    0.000 MiB       14597           line = ""
    71  138.824 MiB    0.000 MiB       14597           if prep[0] in gene_name and prep[1] in gene_name:               # check if both the motif and the gene exists in the registries
    72  138.824 MiB    0.000 MiB       12215               print("got one.", end = " ")
    73  138.824 MiB    1.047 MiB       12215               line += tf_id[gene_name.index(prep[0])] + "\t" + gene_id[gene_name.index(prep[1])] + "\t1.0\n"
    74  138.824 MiB    0.000 MiB       12215               output.append(line)                                         # saves the motif id, the gene id and the weight 1.0
    75  138.824 MiB    0.000 MiB       14597           count += 1
    76  138.824 MiB    0.000 MiB       14597           print("finished.")
    77                                         
    78  138.824 MiB    0.000 MiB           1       return output


Filename: scripts/filter_motifs.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    81  138.824 MiB  138.824 MiB           1   @profile(precision = 3, stream = log)
    82                                         def save_data(output):
    83  138.824 MiB    0.000 MiB           1       new_file = open(path + "output/motif.txt", "w")                     # creates a new file to save the motifs
    84  138.926 MiB    0.102 MiB           1       new_file.writelines(output)                                         # saves the data
    85  138.926 MiB    0.000 MiB           1       new_file.close()


Time execution:3.1062372263666664min
Filter_motifs.
Filename: scripts/filter_ppi.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    29   37.387 MiB   37.387 MiB           1   @profile(precision = 3, stream = log)
    30                                         def reading_data(protein_link, proteins):
    31   37.547 MiB    0.160 MiB           1       file_ppi = open(protein_link, "r")                                      # opens the file that contiains the protein interactions
    32   37.547 MiB    0.000 MiB           1       file_proteins = open(proteins, "r")                                     # opens the file that contains the proteins
    33                                         
    34   38.832 MiB    1.285 MiB           1       data_proteins = file_proteins.readlines()                               # reads the data
    35 1222.914 MiB 1184.082 MiB           1       data_ppi = file_ppi.readlines()                                         # reads the dats
    36 1222.914 MiB    0.000 MiB           1       data_ppi = data_ppi[1:]                                                 # deletes the head row
    37                                         
    38 1222.914 MiB    0.000 MiB           1       file_ppi.close()
    39 1222.914 MiB    0.000 MiB           1       file_proteins.close()
    40                                         
    41 1222.914 MiB    0.000 MiB           1       return data_proteins, data_ppi


Filename: scripts/filter_ppi.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    44 1222.922 MiB 1222.922 MiB           1   @profile(precision = 3, stream = log)
    45                                         def filter_exec(data_proteins, data_ppi):
    46                                             # variables
    47 1222.922 MiB    0.000 MiB           1       output_interactions = list()                                            # list that stores the ppi data
    48 1222.922 MiB    0.000 MiB           1       count = 0
    49                                         
    50 1503.164 MiB  190.395 MiB    11759455       for line in data_ppi:
    51 1503.164 MiB    0.016 MiB    11759454           print("Interaction " + str(count) + "...", end = " ")
    52 1503.164 MiB    0.000 MiB    11759454           l = line.split(" ")                                                 # splits the data line
    53 1503.164 MiB    0.000 MiB    11759454           p1 = l[0].split(".")[1]                                             # reads the first protein
    54 1503.164 MiB    0.000 MiB    11759454           p2 = l[1].split(".")[1]                                             # reads the second protein
    55 1503.164 MiB    0.000 MiB    11759454           w = "0." + l[2].split("\n")[0]                                      # reads the interaction weight
    56                                         
    57 1503.164 MiB    0.227 MiB    11759454           if (p1 + "\n") in data_proteins and (p2 + "\n") in data_proteins:
    58 1503.164 MiB    0.000 MiB     2775400                print("got one.", end = " ")
    59 1503.164 MiB   89.605 MiB     2775400                output_interactions.append(p1 + "\t" + p2 + "\t" + w + "\n")   # saves the data
    60                                         
    61 1503.164 MiB    0.000 MiB    11759454           print("finsihed.")
    62 1503.164 MiB    0.000 MiB    11759454           count += 1
    63                                         
    64 1503.164 MiB    0.000 MiB           1       return output_interactions


Filename: scripts/filter_ppi.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    67 1503.215 MiB 1503.215 MiB           1   @profile(precision = 3, stream = log)
    68                                         def save_data(output_interactions):
    69 1503.215 MiB    0.000 MiB           1       new_file = open(path + "/output/ppi.txt", "w")                          # creates a new file to save the data
    70 1503.230 MiB    0.016 MiB           1       new_file.writelines(output_interactions)                                # saves the data
    71 1503.230 MiB    0.000 MiB           1       new_file.close()


Time execution:123.34169648656666min
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.656 MiB   37.656 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.656 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.656 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.691 MiB   13.035 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.008 MiB   69.316 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.180 MiB    0.172 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.180 MiB    0.000 MiB           1       file_genes.close()
    48  120.180 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.180 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.180 MiB  120.180 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.180 MiB    0.000 MiB           1       genes = list()
    57  120.180 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.395 MiB    0.008 MiB      126010       for gene in genes_data:
    60  140.395 MiB    8.141 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.395 MiB    9.758 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.395 MiB    0.000 MiB      126009           if prep[1] != "\n":
    63  140.395 MiB    2.309 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.395 MiB    0.000 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.395 MiB    0.000 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.395 MiB  140.395 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.395 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.395 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.395 MiB    0.000 MiB           1       count = 0
    78  140.395 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.656 MiB    0.000 MiB        1634       for case in cases_data:
    81  140.656 MiB    0.000 MiB        1634           print("gene " + str(count) + "...", end = " ")
    82  140.656 MiB    0.262 MiB        1634           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.656 MiB    0.000 MiB        1634           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.656 MiB    0.000 MiB         501               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.656 MiB    0.000 MiB         501               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.656 MiB    0.000 MiB         501               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.656 MiB    0.000 MiB         501               print("got one.", end = " ")
    89                                         
    90  140.656 MiB    0.000 MiB         501               if protein != " ":
    91  140.656 MiB    0.000 MiB         445                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.656 MiB    0.000 MiB         501               if limit:
    94  140.656 MiB    0.000 MiB         501                   found += 1
    95                                                 else:
    96  140.656 MiB    0.000 MiB        1133               print("not found in genes.", end = " ")
    97                                         
    98  140.656 MiB    0.000 MiB        1634           count += 1
    99  140.656 MiB    0.000 MiB        1634           print("finished.")
   100                                         
   101  140.656 MiB    0.000 MiB        1634           if limit and found > max_found:
   102  140.656 MiB    0.000 MiB           1               break
   103                                         
   104  140.656 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.656 MiB  140.656 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.656 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.656 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.656 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.656 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.656 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.656 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:0.41061838215min
LIONESS
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.688 MiB   37.688 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.688 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.688 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.723 MiB   13.035 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.047 MiB   69.324 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.207 MiB    0.160 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.207 MiB    0.000 MiB           1       file_genes.close()
    48  120.207 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.207 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.207 MiB  120.207 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.207 MiB    0.000 MiB           1       genes = list()
    57  120.207 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.426 MiB    0.000 MiB      126010       for gene in genes_data:
    60  140.426 MiB    9.234 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.426 MiB    7.809 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.426 MiB    0.000 MiB      126009           if prep[1] != "\n":
    63  140.426 MiB    3.176 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.426 MiB    0.000 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.426 MiB    0.000 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.676 MiB  140.676 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.676 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.676 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.676 MiB    0.000 MiB           1       count = 0
    78  140.676 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.688 MiB    0.000 MiB        3217       for case in cases_data:
    81  140.688 MiB    0.000 MiB        3217           print("gene " + str(count) + "...", end = " ")
    82  140.688 MiB    0.012 MiB        3217           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.688 MiB    0.000 MiB        3217           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.688 MiB    0.000 MiB        1001               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.688 MiB    0.000 MiB        1001               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.688 MiB    0.000 MiB        1001               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.688 MiB    0.000 MiB        1001               print("got one.", end = " ")
    89                                         
    90  140.688 MiB    0.000 MiB        1001               if protein != " ":
    91  140.688 MiB    0.000 MiB         877                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.688 MiB    0.000 MiB        1001               if limit:
    94  140.688 MiB    0.000 MiB        1001                   found += 1
    95                                                 else:
    96  140.688 MiB    0.000 MiB        2216               print("not found in genes.", end = " ")
    97                                         
    98  140.688 MiB    0.000 MiB        3217           count += 1
    99  140.688 MiB    0.000 MiB        3217           print("finished.")
   100                                         
   101  140.688 MiB    0.000 MiB        3217           if limit and found > max_found:
   102  140.688 MiB    0.000 MiB           1               break
   103                                         
   104  140.688 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.688 MiB  140.688 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.688 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.688 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.688 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.688 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.688 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.688 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:0.49054252365min
LIONESS
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.762 MiB   37.762 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.762 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.762 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.707 MiB   12.945 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.281 MiB   69.574 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.285 MiB    0.004 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.285 MiB    0.000 MiB           1       file_genes.close()
    48  120.285 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.285 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.285 MiB  120.285 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.285 MiB    0.000 MiB           1       genes = list()
    57  120.285 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.496 MiB    0.000 MiB      126010       for gene in genes_data:
    60  140.496 MiB    8.043 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.496 MiB    8.355 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.496 MiB    0.234 MiB      126009           if prep[1] != "\n":
    63  140.496 MiB    3.324 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.496 MiB    0.254 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.750 MiB    0.254 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.750 MiB  140.750 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.750 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.750 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.750 MiB    0.000 MiB           1       count = 0
    78  140.750 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.762 MiB    0.000 MiB        9311       for case in cases_data:
    81  140.762 MiB    0.000 MiB        9311           print("gene " + str(count) + "...", end = " ")
    82  140.762 MiB    0.012 MiB        9311           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.762 MiB    0.000 MiB        9311           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.762 MiB    0.000 MiB        3001               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.762 MiB    0.000 MiB        3001               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.762 MiB    0.000 MiB        3001               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.762 MiB    0.000 MiB        3001               print("got one.", end = " ")
    89                                         
    90  140.762 MiB    0.000 MiB        3001               if protein != " ":
    91  140.762 MiB    0.000 MiB        2625                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.762 MiB    0.000 MiB        3001               if limit:
    94  140.762 MiB    0.000 MiB        3001                   found += 1
    95                                                 else:
    96  140.762 MiB    0.000 MiB        6310               print("not found in genes.", end = " ")
    97                                         
    98  140.762 MiB    0.000 MiB        9311           count += 1
    99  140.762 MiB    0.000 MiB        9311           print("finished.")
   100                                         
   101  140.762 MiB    0.000 MiB        9311           if limit and found > max_found:
   102  140.762 MiB    0.000 MiB           1               break
   103                                         
   104  140.762 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.762 MiB  140.762 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.762 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.762 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.762 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.762 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.762 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.762 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:0.7588122051666667min
LIONESS
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.762 MiB   37.762 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.762 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.762 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.703 MiB   12.941 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.020 MiB   69.316 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.277 MiB    0.258 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.277 MiB    0.000 MiB           1       file_genes.close()
    48  120.277 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.277 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.277 MiB  120.277 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.277 MiB    0.000 MiB           1       genes = list()
    57  120.277 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.645 MiB    2.996 MiB      126010       for gene in genes_data:
    60  140.645 MiB    8.086 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.645 MiB    6.715 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.645 MiB    0.000 MiB      126009           if prep[1] != "\n":
    63  140.645 MiB    2.316 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.645 MiB    0.254 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.645 MiB    0.000 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.750 MiB  140.750 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.750 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.750 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.750 MiB    0.000 MiB           1       count = 0
    78  140.750 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.773 MiB    0.000 MiB       15682       for case in cases_data:
    81  140.773 MiB    0.000 MiB       15682           print("gene " + str(count) + "...", end = " ")
    82  140.773 MiB    0.016 MiB       15682           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.773 MiB    0.008 MiB       15682           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.773 MiB    0.000 MiB        5001               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.773 MiB    0.000 MiB        5001               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.773 MiB    0.000 MiB        5001               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.773 MiB    0.000 MiB        5001               print("got one.", end = " ")
    89                                         
    90  140.773 MiB    0.000 MiB        5001               if protein != " ":
    91  140.773 MiB    0.000 MiB        4376                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.773 MiB    0.000 MiB        5001               if limit:
    94  140.773 MiB    0.000 MiB        5001                   found += 1
    95                                                 else:
    96  140.773 MiB    0.000 MiB       10681               print("not found in genes.", end = " ")
    97                                         
    98  140.773 MiB    0.000 MiB       15682           count += 1
    99  140.773 MiB    0.000 MiB       15682           print("finished.")
   100                                         
   101  140.773 MiB    0.000 MiB       15682           if limit and found > max_found:
   102  140.773 MiB    0.000 MiB           1               break
   103                                         
   104  140.773 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.762 MiB  140.762 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.762 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.762 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.762 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.762 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.762 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.762 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:1.04893970985min
LIONESS
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.832 MiB   37.832 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.832 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.832 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.770 MiB   12.938 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.340 MiB   69.570 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.352 MiB    0.012 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.352 MiB    0.000 MiB           1       file_genes.close()
    48  120.352 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.352 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.352 MiB  120.352 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.352 MiB    0.000 MiB           1       genes = list()
    57  120.352 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.566 MiB    0.004 MiB      126010       for gene in genes_data:
    60  140.566 MiB    7.508 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.566 MiB   10.141 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.566 MiB    0.000 MiB      126009           if prep[1] != "\n":
    63  140.566 MiB    2.562 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.566 MiB    0.000 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.566 MiB    0.000 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.816 MiB  140.816 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.816 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.816 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.816 MiB    0.000 MiB           1       count = 0
    78  140.816 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.828 MiB    0.000 MiB       31043       for case in cases_data:
    81  140.828 MiB    0.000 MiB       31043           print("gene " + str(count) + "...", end = " ")
    82  140.828 MiB    0.012 MiB       31043           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.828 MiB    0.000 MiB       31043           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.828 MiB    0.000 MiB       10001               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.828 MiB    0.000 MiB       10001               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.828 MiB    0.000 MiB       10001               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.828 MiB    0.000 MiB       10001               print("got one.", end = " ")
    89                                         
    90  140.828 MiB    0.000 MiB       10001               if protein != " ":
    91  140.828 MiB    0.000 MiB        8755                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.828 MiB    0.000 MiB       10001               if limit:
    94  140.828 MiB    0.000 MiB       10001                   found += 1
    95                                                 else:
    96  140.828 MiB    0.000 MiB       21042               print("not found in genes.", end = " ")
    97                                         
    98  140.828 MiB    0.000 MiB       31043           count += 1
    99  140.828 MiB    0.000 MiB       31043           print("finished.")
   100                                         
   101  140.828 MiB    0.000 MiB       31043           if limit and found > max_found:
   102  140.828 MiB    0.000 MiB           1               break
   103                                         
   104  140.828 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.828 MiB  140.828 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.828 MiB    0.000 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.828 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.828 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.828 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.828 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.828 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:1.6972584905499999min
LIONESS
Filter_motifs.
LIONESS
Filter_motifs.
Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    38   37.797 MiB   37.797 MiB           1   @profile(precision = 3, stream = log)
    39                                         def reading_data(protein_coding, cases):
    40   37.797 MiB    0.000 MiB           1       file_genes = open(protein_coding, "r")                              # opens the protein coding genes/proteins file
    41   37.797 MiB    0.000 MiB           1       file_cases = open(cases, "r")                                       # opens the cases file
    42                                         
    43   50.840 MiB   13.043 MiB           1       genes_data = file_genes.readlines()                                 # read the data
    44  120.156 MiB   69.316 MiB           1       cases_data = file_cases.readlines()                                 # read the data
    45  120.324 MiB    0.168 MiB           1       genes_data = genes_data[1:]                                         # deletes the title line
    46                                         
    47  120.324 MiB    0.000 MiB           1       file_genes.close()
    48  120.324 MiB    0.000 MiB           1       file_cases.close()
    49                                         
    50  120.324 MiB    0.000 MiB           1       return genes_data, cases_data


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    53  120.324 MiB  120.324 MiB           1   @profile(precision = 3, stream = log)
    54                                         def prep_data(genes_data):
    55                                             # storage variables
    56  120.324 MiB    0.000 MiB           1       genes = list()
    57  120.324 MiB    0.000 MiB           1       proteins = list()
    58                                         
    59  140.691 MiB    0.723 MiB      126010       for gene in genes_data:
    60  140.691 MiB    7.758 MiB      126009           prep = gene.split(",")                                          # splits the data line
    61  140.691 MiB    9.363 MiB      126009           genes.append(prep[0])                                           # saves the gene id
    62  140.691 MiB    0.117 MiB      126009           if prep[1] != "\n":
    63  140.691 MiB    2.148 MiB      111232               proteins.append(prep[1])                                    # if protein, saves the protein id
    64                                                 else:
    65  140.691 MiB    0.258 MiB       14777               proteins.append(" ")                                        # if no protein, leaves it blank
    66                                         
    67  140.691 MiB    0.000 MiB           1       return genes, proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    70  140.793 MiB  140.793 MiB           1   @profile(precision = 3, stream = log)
    71                                         def filter_exec(cases_data, limit, max_found):
    72                                             # storage variables
    73  140.793 MiB    0.000 MiB           1       filtered_genes = list()                                             # list that save the filtered genes
    74  140.793 MiB    0.000 MiB           1       filtered_proteins = list()                                          # list that saves the filtered proteins
    75                                         
    76                                             # counter
    77  140.793 MiB    0.000 MiB           1       count = 0
    78  140.793 MiB    0.000 MiB           1       found = 0
    79                                         
    80  140.812 MiB    0.000 MiB        1634       for case in cases_data:
    81  140.812 MiB    0.000 MiB        1634           print("gene " + str(count) + "...", end = " ")
    82  140.812 MiB    0.004 MiB        1634           c = case.split("\t")                                            # splits the data line
    83                                         
    84  140.812 MiB    0.008 MiB        1634           if c[0] in genes:                                               # checks if the gene is protein coding
    85  140.812 MiB    0.000 MiB         501               filtered_genes.append(case)                                 # saves the cases associated to that gene
    86  140.812 MiB    0.000 MiB         501               gene = genes[genes.index(c[0])]                             # searches for the gene id
    87  140.812 MiB    0.008 MiB         501               protein = proteins[genes.index(c[0])]                       # searches for a protein associated to that gene
    88  140.812 MiB    0.000 MiB         501               print("got one.", end = " ")
    89                                         
    90  140.812 MiB    0.000 MiB         501               if protein != " ":
    91  140.812 MiB    0.000 MiB         445                   filtered_proteins.append(protein)                       # if a protein, saves the protein to another list
    92                                         
    93  140.812 MiB    0.000 MiB         501               if limit:
    94  140.812 MiB    0.000 MiB         501                   found += 1
    95                                                 else:
    96  140.812 MiB    0.000 MiB        1133               print("not found in genes.", end = " ")
    97                                         
    98  140.812 MiB    0.000 MiB        1634           count += 1
    99  140.812 MiB    0.000 MiB        1634           print("finished.")
   100                                         
   101  140.812 MiB    0.000 MiB        1634           if limit and found > max_found:
   102  140.812 MiB    0.000 MiB           1               break
   103                                         
   104  140.812 MiB    0.000 MiB           1       return filtered_genes, filtered_proteins


Filename: scripts/filter_genes.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   107  140.812 MiB  140.812 MiB           1   @profile(precision = 3, stream = log)
   108                                         def save_data(filtered_genes, filtered_proteins):
   109  140.816 MiB    0.004 MiB           1       file_output_genes = open(path + "output/genes.txt", "w")            # creates a file to save the cases output
   110  140.816 MiB    0.000 MiB           1       file_output_proteins = open(path + "output/proteins.txt", "w")      # creates a file to save the gene-protein data
   111                                         
   112  140.816 MiB    0.000 MiB           1       file_output_genes.writelines(filtered_genes)                        # saves the data
   113  140.816 MiB    0.000 MiB           1       file_output_proteins.writelines(filtered_proteins)                  # saves the data
   114                                         
   115  140.816 MiB    0.000 MiB           1       file_output_genes.close()
   116  140.816 MiB    0.000 MiB           1       file_output_proteins.close()


Time execution:0.43524676581666666min
LIONESS
Filename: scripts/main.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
    24  148.258 MiB  148.258 MiB           1   @profile(precision = 3, stream = log)
    25                                         def panda_exec(genes, motif, ppi):
    26 3012.836 MiB 2864.578 MiB           1       panda_obj = Panda(genes, motif, ppi, remove_missing=False, keep_expression_matrix=True, save_memory=False)
    27 3012.836 MiB    0.000 MiB           1       return panda_obj


